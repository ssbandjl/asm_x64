     1                                  ;应用程序，李忠，2023-01-03
     2                                  ;文件：c08_userapp3.asm
     3                                  ;演示互斥锁的应用策略
     4                                  
     5                                  ;===============================================================================
     6                                  section app_header                                ;应用程序头部
     7 00000000 [3E03000000000000]        length       dq app_end                         ;#0：用户程序的总长度（字节数）
     8 00000008 [3203000000000000]        entry        dq start                           ;#8：用户程序入口点
     9 00000010 0000000000000000          linear       dq 0                               ;#16：用户程序加载的虚拟（线性）地址
    10                                  
    11                                  ;===============================================================================
    12                                  section app_data                                  ;应用程序数据段
    13                                  
    14 00000000 5468726561642000          tid_prex     db "Thread ", 0
    15 00000008 2068617320636F6D70-       thrd_msg     db " has completed the calculation.", 0
    15 00000011 6C6574656420746865-
    15 0000001A 2063616C63756C6174-
    15 00000023 696F6E2E00         
    16 00000028 0000000000000000          share_d      dq 0
    17 00000030 0000000000000000          mutex_ptr    dq 0                               ;互斥锁的指针（线性地址）
    18                                  
    19                                  ;===============================================================================
    20                                  section app_code                                  ;应用程序代码段
    21                                  
    22                                  %include "..\common\user_static64.lib"
    23                              <1> ;user_static64.lib:用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件
    24                              <1> ;中实现，但有些功能需要通过syscall指令使用内核提供的系统调用。
    25                              <1> ;创建时间：2022-01-30 18:30，李忠
    26                              <1> ;此文件需要用预处理指令%include引入用户程序。
    27                              <1> 
    28                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    29                              <1>          bits 64
    30                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    31                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    32                              <1>                                                   ;输入：R8=64位二进制数
    33                              <1>                                                   ;      RBX=目标缓冲区线性地址
    34 00000000 50                  <1>          push rax
    35 00000001 53                  <1>          push rbx
    36 00000002 51                  <1>          push rcx
    37 00000003 52                  <1>          push rdx
    38 00000004 4150                <1>          push r8
    39                              <1> 
    40 00000006 490FBAE03F          <1>          bt r8, 63
    41 0000000B 7309                <1>          jnc .begin
    42 0000000D C6032D              <1>          mov byte [rbx], '-'
    43 00000010 49F7D8              <1>          neg r8
    44 00000013 48FFC3              <1>          inc rbx
    45                              <1>   .begin:
    46 00000016 4C89C0              <1>          mov rax, r8                              ;!!
    47 00000019 41B80A000000        <1>          mov r8, 10
    48 0000001F 4831C9              <1>          xor rcx, rcx
    49                              <1> 
    50                              <1>   .next_div:
    51 00000022 4831D2              <1>          xor rdx, rdx
    52 00000025 49F7F0              <1>          div r8
    53 00000028 52                  <1>          push rdx                                 ;保存分解的数位
    54 00000029 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    55 0000002C 4809C0              <1>          or rax, rax                              ;商为0？
    56 0000002F 7402                <1>          jz .rotate
    57 00000031 EBEF                <1>          jmp .next_div
    58                              <1> 
    59                              <1>   .rotate:
    60 00000033 5A                  <1>          pop rdx
    61 00000034 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    62 00000037 8813                <1>          mov [rbx], dl
    63 00000039 48FFC3              <1>          inc rbx
    64 0000003C E2F5                <1>          loop .rotate
    65                              <1> 
    66 0000003E C60300              <1>          mov byte [rbx], 0
    67                              <1> 
    68 00000041 4158                <1>          pop r8
    69 00000043 5A                  <1>          pop rdx
    70 00000044 59                  <1>          pop rcx
    71 00000045 5B                  <1>          pop rbx
    72 00000046 58                  <1>          pop rax
    73                              <1> 
    74 00000047 C3                  <1>          ret                                      ;段内返回
    75                              <1> 
    76                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    77                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    78                              <1>                                                   ;输入：RSI=源字符串的线性地址
    79                              <1>                                                   ;      RDI=目的字符串的线性地址
    80 00000048 50                  <1>          push rax
    81 00000049 56                  <1>          push rsi
    82 0000004A 57                  <1>          push rdi
    83                              <1> 
    84                              <1>   .r0:
    85 0000004B 803F00              <1>          cmp byte [rdi], 0
    86 0000004E 7405                <1>          jz .r1
    87 00000050 48FFC7              <1>          inc rdi
    88 00000053 EBF6                <1>          jmp .r0
    89                              <1> 
    90                              <1>   .r1:
    91 00000055 8A06                <1>          mov al, [rsi]
    92 00000057 8807                <1>          mov [rdi], al
    93 00000059 3C00                <1>          cmp al, 0
    94 0000005B 7408                <1>          jz .r2
    95 0000005D 48FFC6              <1>          inc rsi
    96 00000060 48FFC7              <1>          inc rdi
    97 00000063 EBF0                <1>          jmp .r1
    98                              <1> 
    99                              <1>   .r2:
   100 00000065 5F                  <1>          pop rdi
   101 00000066 5E                  <1>          pop rsi
   102 00000067 58                  <1>          pop rax
   103                              <1> 
   104 00000068 C3                  <1>          ret
   105                              <1> 
   106                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   107                              <1> 
    23                                  
    24                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    25                                           bits 64
    26                                  
    27                                  thread_procedure1:
    28 00000069 4889E5                           mov rbp, rsp                             ;RBP访问栈中数据，高级语言中的局部变量。
    29 0000006C 4883EC20                         sub rsp, 32
    30                                  
    31 00000070 B80A000000                       mov rax, 10                              ;分配内存
    32 00000075 BAA0000000                       mov rdx, 160                             ;160个字节
    33 0000007A 0F05                             syscall
    34 0000007C 4C896DF8                         mov [rbp-8], r13                         ;RBP-8->总字符串缓冲区的线性地址
    35                                  
    36 00000080 4981C580000000                   add r13, 128
    37 00000087 4C896DF0                         mov [rbp-16], r13                        ;RBP-16->用来保存线程标识的文本
    38                                  
    39 0000008B B808000000                       mov rax, 8                               ;获得当前线程的标识
    40 00000090 0F05                             syscall
    41 00000092 4989C0                           mov r8, rax
    42 00000095 488B5DF0                         mov rbx, [rbp-16]
    43 00000099 E862FFFFFF                       call bin64_to_dec                        ;将线程标识转换为字符串
    44                                  
    45 0000009E 488B15(30000000)                 mov rdx, [rel mutex_ptr]                 ;互斥锁的线性地址
    46 000000A5 B80D000000                       mov rax, 13                              ;获取互斥锁
    47 000000AA 0F05                             syscall
    48                                  
    49 000000AC B90065CD1D                       mov rcx, 500000000
    50                                    .plus_one:
    51 000000B1 48FF05(28000000)                 inc qword [rel share_d]
    52 000000B8 E2F7                             loop .plus_one
    53                                  
    54 000000BA B80E000000                       mov rax, 14                              ;释放互斥锁
    55 000000BF 0F05                             syscall
    56                                  
    57 000000C1 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
    58                                  
    59 000000C8 488B7DF8                         mov rdi, [rbp-8]                         ;总字符串缓冲区的线性地址
    60 000000CC C60700                           mov byte [rdi], 0
    61                                  
    62 000000CF 498DB424[00000000]               lea rsi, [r12 + tid_prex]
    63 000000D7 E86CFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    64                                  
    65 000000DC 488B75F0                         mov rsi, [rbp-16]
    66 000000E0 E863FFFFFF                       call string_concatenates
    67                                  
    68 000000E5 498DB424[08000000]               lea rsi, [r12 + thrd_msg]
    69 000000ED E856FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    70                                  
    71 000000F2 B800000000                       mov rax, 0                               ;确定当前线程可以使用的显示行
    72 000000F7 0F05                             syscall                                  ;可用显示行，DH=行号
    73                                  
    74 000000F9 B200                             mov dl, 0
    75 000000FB 41B10F                           mov r9b, 0x0f
    76                                  
    77 000000FE B802000000                       mov rax, 2                               ;在指定坐标显示字符串
    78 00000103 4889FB                           mov rbx, rdi
    79 00000106 0F05                             syscall
    80                                  
    81 00000108 4889EC                           mov rsp, rbp                             ;栈平衡到返回位置
    82                                  
    83 0000010B C3                               ret
    84                                  
    85                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    86                                  thread_procedure2:
    87 0000010C 4889E5                           mov rbp, rsp                             ;RBP访问栈中数据，高级语言中的局部变量。
    88 0000010F 4883EC20                         sub rsp, 32
    89                                  
    90 00000113 B80A000000                       mov rax, 10                              ;分配内存
    91 00000118 BAA0000000                       mov rdx, 160                             ;160个字节
    92 0000011D 0F05                             syscall
    93 0000011F 4C896DF8                         mov [rbp-8], r13                         ;RBP-8->总字符串缓冲区的线性地址
    94                                  
    95 00000123 4981C580000000                   add r13, 128
    96 0000012A 4C896DF0                         mov [rbp-16], r13                        ;RBP-16->用来保存线程标识的文本
    97                                  
    98 0000012E B808000000                       mov rax, 8                               ;获得当前线程的标识
    99 00000133 0F05                             syscall
   100 00000135 4989C0                           mov r8, rax
   101 00000138 488B5DF0                         mov rbx, [rbp-16]
   102 0000013C E8BFFEFFFF                       call bin64_to_dec                        ;将线程标识转换为字符串
   103                                  
   104 00000141 488B15(30000000)                 mov rdx, [rel mutex_ptr]                 ;互斥锁的线性地址
   105 00000148 B80D000000                       mov rax, 13                              ;获取互斥锁
   106 0000014D 0F05                             syscall
   107                                  
   108 0000014F B90065CD1D                       mov rcx, 500000000
   109                                    .minus_one:
   110 00000154 48FF0D(28000000)                 dec qword [rel share_d]
   111 0000015B E2F7                             loop .minus_one
   112                                  
   113 0000015D B80E000000                       mov rax, 14                              ;释放互斥锁
   114 00000162 0F05                             syscall
   115                                  
   116 00000164 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
   117                                  
   118 0000016B 488B7DF8                         mov rdi, [rbp-8]                         ;总字符串缓冲区的线性地址
   119 0000016F C60700                           mov byte [rdi], 0
   120                                  
   121 00000172 498DB424[00000000]               lea rsi, [r12 + tid_prex]
   122 0000017A E8C9FEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   123                                  
   124 0000017F 488B75F0                         mov rsi, [rbp-16]
   125 00000183 E8C0FEFFFF                       call string_concatenates
   126                                  
   127 00000188 498DB424[08000000]               lea rsi, [r12 + thrd_msg]
   128 00000190 E8B3FEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   129                                  
   130 00000195 B800000000                       mov rax, 0                               ;确定当前线程可以使用的显示行
   131 0000019A 0F05                             syscall                                  ;可用显示行，DH=行号
   132                                  
   133 0000019C B200                             mov dl, 0
   134 0000019E 41B10F                           mov r9b, 0x0f
   135                                  
   136 000001A1 B802000000                       mov rax, 2                               ;在指定坐标显示字符串
   137 000001A6 4889FB                           mov rbx, rdi
   138 000001A9 0F05                             syscall
   139                                  
   140 000001AB 4889EC                           mov rsp, rbp                             ;栈平衡到返回位置
   141                                  
   142 000001AE C3                               ret
   143                                  
   144                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   145                                  main:
   146 000001AF B80C000000                       mov rax, 12                              ;初始化互斥锁变量
   147 000001B4 0F05                             syscall
   148 000001B6 488915(30000000)                 mov [rel mutex_ptr], rdx                 ;保存互斥锁的线性地址
   149                                  
   150 000001BD 488B3D(10000000)                 mov rdi, [rel linear]                    ;当前程序加载的起始线性地址
   151                                  
   152 000001C4 B807000000                       mov rax, 7                               ;创建线程
   153                                  
   154 000001C9 488DB7[69000000]                 lea rsi, [rdi + thread_procedure1]       ;线程例程的线性地址
   155 000001D0 0F05                             syscall                                  ;创建第一个线程
   156 000001D2 48891579000000                   mov [rel .thrd_1], rdx                   ;保存线程1的标识
   157                                  
   158 000001D9 488DB7[0C010000]                 lea rsi, [rdi + thread_procedure2]       ;线程例程的线性地址
   159 000001E0 0F05                             syscall                                  ;创建第二个线程
   160 000001E2 48891571000000                   mov [rel .thrd_2], rdx                   ;保存线程2的标识
   161                                  
   162 000001E9 B80B000000                       mov rax, 11
   163 000001EE 488B155D000000                   mov rdx, [rel .thrd_1]
   164 000001F5 0F05                             syscall                                  ;等待线程1结束
   165                                  
   166 000001F7 488B155C000000                   mov rdx, [rel .thrd_2]
   167 000001FE 0F05                             syscall                                  ;等待线程2结束
   168                                  
   169 00000200 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
   170                                  
   171 00000207 498DBC24[B2020000]               lea rdi, [r12 + .main_buf]               ;总字符串缓冲区的线性地址
   172 0000020F C60700                           mov byte [rdi], 0
   173                                  
   174 00000212 498DB424[62020000]               lea rsi, [r12 + .main_msg]
   175 0000021A E829FEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   176                                  
   177 0000021F 4C8B05(28000000)                 mov r8, [rel share_d]
   178 00000226 498D9C24[92020000]               lea rbx, [r12 + .main_dat]
   179 0000022E E8CDFDFFFF                       call bin64_to_dec                        ;将共享变量的值转换为字符串
   180                                  
   181 00000233 4889DE                           mov rsi, rbx
   182 00000236 E80DFEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   183                                  
   184 0000023B B800000000                       mov rax, 0                               ;确定当前线程可以使用的显示行
   185 00000240 0F05                             syscall                                  ;可用显示行，DH=行号
   186                                  
   187 00000242 B200                             mov dl, 0                                ;列坐标
   188 00000244 41B10F                           mov r9b, 0x0f                            ;文本颜色
   189                                  
   190 00000247 B802000000                       mov rax, 2                               ;在指定坐标显示字符串
   191 0000024C 4889FB                           mov rbx, rdi
   192 0000024F 0F05                             syscall
   193                                  
   194 00000251 C3                               ret
   195                                  
   196 00000252 0000000000000000          .thrd_1       dq 0                              ;线程1的标识
   197 0000025A 0000000000000000          .thrd_2       dq 0                              ;线程2的标识
   198                                  
   199 00000262 54686520726573756C-       .main_msg db "The result after calculation by two threads is:", 0
   199 0000026B 742061667465722063-
   199 00000274 616C63756C6174696F-
   199 0000027D 6E2062792074776F20-
   199 00000286 746872656164732069-
   199 0000028F 733A00             
   200 00000292 00<rep 20h>               .main_dat times 32 db 0
   201 000002B2 00<rep 80h>               .main_buf times 128 db 0
   202                                  
   203                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   204                                  start:   ;程序的入口点
   205                                  
   206                                           ;这里放置初始化代码，比如初始化全局数据（变量）
   207                                  
   208 00000332 E878FEFFFF                       call main
   209                                  
   210                                           ;这里放置清理代码
   211                                  
   212 00000337 B805000000                       mov rax, 5                               ;终止任务
   213 0000033C 0F05                             syscall
   214                                  
   215                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   216                                  app_end:
