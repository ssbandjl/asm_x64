     1                                  ;c06_shell.asm:系统外壳程序，2022-1-19。用于模拟一个操作系统用户接口，比如Linux控制台
     2                                  
     3                                  ;===============================================================================
     4                                  section shell_header                              ;外壳程序头部
     5 00000000 [0D01000000000000]        length       dq shell_end                       ;#0：外壳程序的总长度（字节数）
     6 00000008 [0801000000000000]        entry        dq start                           ;#8：外壳入口点
     7 00000010 0000000000000000          linear       dq 0                               ;#16：外壳加载的虚拟（线性）地址
     8                                  
     9                                  ;===============================================================================
    10                                  section shell_data                                ;外壳程序数据段
    11 00000000 00<rep 80h>               shell_msg    times 128 db 0
    12                                  
    13 00000080 4F53205348454C4C20-       msg0         db "OS SHELL on CPU ", 0
    13 00000089 6F6E204350552000   
    14 00000091 00<rep 20h>               pcpu         times 32 db 0                      ;处理器编号的文本
    15 000000B1 202D00                    msg1         db " -", 0
    16                                  
    17 000000B4 00<rep 20h>               time_buff    times 32 db 0                      ;当前时间的文本
    18                                  
    19                                  
    20                                  ;===============================================================================
    21                                  section shell_code                                ;外壳程序代码段
    22                                  
    23                                  %include "..\common\user_static64.lib"
    24                              <1> ;user_static64.lib:用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件
    25                              <1> ;中实现，但有些功能需要通过syscall指令使用内核提供的系统调用。
    26                              <1> ;创建时间：2022-01-30 18:30，李忠
    27                              <1> ;此文件需要用预处理指令%include引入用户程序。
    28                              <1> 
    29                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    30                              <1>          bits 64
    31                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    32                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    33                              <1>                                                   ;输入：R8=64位二进制数
    34                              <1>                                                   ;      RBX=目标缓冲区线性地址
    35 00000000 50                  <1>          push rax
    36 00000001 53                  <1>          push rbx
    37 00000002 51                  <1>          push rcx
    38 00000003 52                  <1>          push rdx
    39 00000004 4150                <1>          push r8
    40                              <1> 
    41 00000006 490FBAE03F          <1>          bt r8, 63
    42 0000000B 7309                <1>          jnc .begin
    43 0000000D C6032D              <1>          mov byte [rbx], '-'
    44 00000010 49F7D8              <1>          neg r8
    45 00000013 48FFC3              <1>          inc rbx
    46                              <1>   .begin:
    47 00000016 4C89C0              <1>          mov rax, r8                              ;!!
    48 00000019 41B80A000000        <1>          mov r8, 10
    49 0000001F 4831C9              <1>          xor rcx, rcx
    50                              <1> 
    51                              <1>   .next_div:
    52 00000022 4831D2              <1>          xor rdx, rdx
    53 00000025 49F7F0              <1>          div r8
    54 00000028 52                  <1>          push rdx                                 ;保存分解的数位
    55 00000029 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    56 0000002C 4809C0              <1>          or rax, rax                              ;商为0？
    57 0000002F 7402                <1>          jz .rotate
    58 00000031 EBEF                <1>          jmp .next_div
    59                              <1> 
    60                              <1>   .rotate:
    61 00000033 5A                  <1>          pop rdx
    62 00000034 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    63 00000037 8813                <1>          mov [rbx], dl
    64 00000039 48FFC3              <1>          inc rbx
    65 0000003C E2F5                <1>          loop .rotate
    66                              <1> 
    67 0000003E C60300              <1>          mov byte [rbx], 0
    68                              <1> 
    69 00000041 4158                <1>          pop r8
    70 00000043 5A                  <1>          pop rdx
    71 00000044 59                  <1>          pop rcx
    72 00000045 5B                  <1>          pop rbx
    73 00000046 58                  <1>          pop rax
    74                              <1> 
    75 00000047 C3                  <1>          ret                                      ;段内返回
    76                              <1> 
    77                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    78                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    79                              <1>                                                   ;输入：RSI=源字符串的线性地址
    80                              <1>                                                   ;      RDI=目的字符串的线性地址
    81 00000048 50                  <1>          push rax
    82 00000049 56                  <1>          push rsi
    83 0000004A 57                  <1>          push rdi
    84                              <1> 
    85                              <1>   .r0:
    86 0000004B 803F00              <1>          cmp byte [rdi], 0
    87 0000004E 7405                <1>          jz .r1
    88 00000050 48FFC7              <1>          inc rdi
    89 00000053 EBF6                <1>          jmp .r0
    90                              <1> 
    91                              <1>   .r1:
    92 00000055 8A06                <1>          mov al, [rsi]
    93 00000057 8807                <1>          mov [rdi], al
    94 00000059 3C00                <1>          cmp al, 0
    95 0000005B 7408                <1>          jz .r2
    96 0000005D 48FFC6              <1>          inc rsi
    97 00000060 48FFC7              <1>          inc rdi
    98 00000063 EBF0                <1>          jmp .r1
    99                              <1> 
   100                              <1>   .r2:
   101 00000065 5F                  <1>          pop rdi
   102 00000066 5E                  <1>          pop rsi
   103 00000067 58                  <1>          pop rax
   104                              <1> 
   105 00000068 C3                  <1>          ret
   106                              <1> 
   107                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   108                              <1> 
    24                                  
    25                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    26                                           bits 64
    27                                  
    28                                  main:
    29                                           ;这里可显示一个界面，比如Windows桌面或者Linux控制台窗口，用于接收用户
    30                                           ;输入的命令，包括显示磁盘文件、设置系统参数或者运行一个程序。我们的系
    31                                           ;统很简单，所以不提供这些功能。
    32                                  
    33                                           ;以下， 模拟按用户的要求运行8个程序......
    34 00000069 41B864000000                     mov r8, 100
    35 0000006F B803000000                       mov rax, 3
    36 00000074 0F05                             syscall
    37 00000076 0F05                             syscall
    38 00000078 0F05                             syscall
    39 0000007A 0F05                             syscall
    40 0000007C 0F05                             syscall
    41 0000007E 0F05                             syscall
    42 00000080 0F05                             syscall
    43 00000082 0F05                             syscall                                  ;用同一个副本创建8个任务
    44                                  
    45 00000084 B800000000                       mov rax, 0
    46 00000089 0F05                             syscall                                  ;可用显示行，DH=行号
    47 0000008B B200                             mov dl, 0
    48 0000008D 41B15F                           mov r9b, 0x5f
    49                                  
    50 00000090 4C8B25(10000000)                 mov r12, [rel linear]
    51                                    _time:
    52 00000097 498D9C24[B4000000]               lea rbx, [r12 + time_buff]
    53 0000009F B801000000                       mov rax, 1
    54 000000A4 0F05                             syscall
    55                                  
    56 000000A6 B806000000                       mov rax, 6                               ;获得当前处理器的编号
    57 000000AB 0F05                             syscall
    58 000000AD 4989C0                           mov r8, rax
    59 000000B0 498D9C24[91000000]               lea rbx, [r12 + pcpu]
    60 000000B8 E843FFFFFF                       call bin64_to_dec                        ;将处理器的编号转换为字符串
    61                                  
    62 000000BD 498DBC24[00000000]               lea rdi, [r12 + shell_msg]
    63 000000C5 C60700                           mov byte [rdi], 0
    64                                  
    65 000000C8 498DB424[80000000]               lea rsi, [r12 + msg0]
    66 000000D0 E873FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    67                                  
    68 000000D5 498DB424[91000000]               lea rsi, [r12 + pcpu]
    69 000000DD E866FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    70                                  
    71 000000E2 498DB424[B1000000]               lea rsi, [r12 + msg1]
    72 000000EA E859FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    73                                  
    74 000000EF 498DB424[B4000000]               lea rsi, [r12 + time_buff]
    75 000000F7 E84CFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    76                                  
    77 000000FC 4889FB                           mov rbx, rdi
    78 000000FF B802000000                       mov rax, 2
    79 00000104 0F05                             syscall
    80                                  
    81 00000106 EB8F                             jmp _time
    82                                  
    83                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    84                                  start:    ;程序的入口点
    85 00000108 E85CFFFFFF                       call main
    86                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    87                                  shell_end:
