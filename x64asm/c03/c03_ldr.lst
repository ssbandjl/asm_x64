     1                                  ;c03_ldr.asm:内核加载器，李忠，2021-7-18
     2                                  ;-------------------------------------------------------------------------------
     3                                  %include "..\common\global_defs.wid"
     4                              <1> ;global_defs.wid:系统全局使用的常量定义。李忠，2021-09-05
     5                              <1> 
     6                              <1> ;定义地址的，至少按16字节对齐！！！与分页有关的地址必须按4KB对齐！！！
     7                              <1> 
     8                              <1> %ifndef _GLOBAL_DEFS_
     9                              <1>    %define _GLOBAL_DEFS_
    10                              <1> 
    11                              <1>    SDA_PHY_ADDR        equ     0x00007e00	;系统数据区的起始物理地址
    12                              <1>    PML5_PHY_ADDR       equ     0x00009000	;内核5级头表物理地址
    13                              <1>    PML4_PHY_ADDR       equ     0x0000a000	;内核4级头表物理地址
    14                              <1>    PDPT_PHY_ADDR       equ     0x0000b000	;对应于低端2MB的内核页目录指针表物理地址
    15                              <1>    PDT_PHY_ADDR        equ     0x0000c000	;对应于低端2MB的页目录表物理地址
    16                              <1>    PT_PHY_ADDR         equ     0x0000d000	;对应于低端2MB的内核页表的物理地址
    17                              <1>    IDT_PHY_ADDR        equ     0x0000e000	;中断描述符表的物理地址
    18                              <1>    LDR_PHY_ADDR        equ     0x0000f000	;用于安装内核加载器的起始物理地址
    19                              <1>    GDT_PHY_ADDR        equ     0x00010000	;全局描述符表GDT的物理地址
    20                              <1>    CORE_PHY_ADDR       equ     0x00020000	;内核的起始物理地址
    21                              <1>    COR_PDPT_ADDR       equ     0x00100000	;从这个物理地址开始的1MB是内核的254个
    22                              <1> 	                                        ;页目录指针表
    23                              <1>    LDR_START_SECTOR    equ     1      	        ;内核加载器在硬盘上的起始逻辑扇区号
    24                              <1>    COR_START_SECTOR    equ     9      	        ;内核程序在硬盘上的起始逻辑扇区号
    25                              <1> 
    26                              <1>    ;虚拟内存空间的高端起始于线性地址0xffff800000000000
    27                              <1>    UPPER_LINEAR_START  equ     0xffff800000000000
    28                              <1> 
    29                              <1>    UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	;内核的高端线性地址
    30                              <1>    UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ;文本显示缓冲区的高
    31                              <1> 	                                                                ;端起始线性地址
    32                              <1>    UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	;系统数据区的高端线
    33                              <1> 	                                                                ;性地址
    34                              <1>    UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	;GDT的高端线性地址
    35                              <1>    UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	;IDT的高端线性地址
    36                              <1> 
    37                              <1>    ;与全局描述符表有关的选择子定义，及内存管理有关的常量定义
    38                              <1>    CORE_CODE64_SEL     equ     0x0018	;内核代码段的描述符选择子（RPL=00）
    39                              <1>    CORE_STACK64_SEL    equ     0x0020	;内核栈段的描述符选择子（RPL=00）
    40                              <1>    RESVD_DESC_SEL      equ     0x002b	;保留的描述符选择子
    41                              <1>    USER_CODE64_SEL     equ     0x003b	;3特权级代码段的描述符选择子（RPL=11）
    42                              <1>    USER_STACK64_SEL    equ     0x0033	;3特权级栈段的描述符选择子（RPL=11）
    43                              <1> 
    44                              <1>    PHY_MEMORY_SIZE     equ     32    	;物理内存大小（MB），要求至少3MB
    45                              <1>    CORE_ALLOC_START    equ     0xffff800000200000	;在虚拟地址空间高端（内核）分配内存
    46                              <1> 			;时的起始地址
    47                              <1>    USER_ALLOC_START    equ     0x0000000000000000	;在每个任务虚拟地址空间低端分配内存
    48                              <1> 			;时的起始地址
    49                              <1> 
    50                              <1>    ;创建任务时，需要分配一个物理页作为新任务的4级头表，并分配一个临时的线性地址来初始化这个页
    51                              <1>    NEW_PML4_LINEAR     equ     0xffffff7ffffff000	;用来映射新任务4级头表的线性地址
    52                              <1> 
    53                              <1>    LAPIC_START_ADDR    equ     0xffffff7fffffe000	;LOCAL APIC寄存器的起始线性地址
    54                              <1>    IOAPIC_START_ADDR   equ     0xffffff7fffffd000	;I/O APIC寄存器的起始线性地址
    55                              <1> 
    56                              <1>    AP_START_UP_ADDR    equ     0x0000f000 	;应用处理器（AP）启动代码的物理地址
    57                              <1> 
    58                              <1>    SUGG_PREEM_SLICE    equ     55          	;推荐的任务/线程抢占时间片长度（毫秒）
    59                              <1> 
    60                              <1>    ;多处理器环境下的自旋锁加锁宏。需要两个参数：寄存器，以及一个对应宽度的锁变量
    61                              <1>    %macro   SET_SPIN_LOCK 2               	;两个参数，分别是寄存器%1和锁变量%2
    62                              <1>             %%spin_lock:
    63                              <1>                        cmp %2, 0           	;锁是释放状态吗？
    64                              <1>                        je %%get_lock      	;获取锁
    65                              <1>                        pause
    66                              <1>                        jmp %%spin_lock    	;继续尝试获取锁
    67                              <1>             %%get_lock:
    68                              <1>                        mov %1, 1
    69                              <1>                        xchg %1, %2
    70                              <1>                        cmp %1, 0          	;交换前为零？
    71                              <1>                        jne %%spin_lock   	;已有程序抢先加锁，失败重来
    72                              <1>    %endmacro
    73                              <1> 
    74                              <1> %endif
    75                              <1> 
     4                                  ;===============================================================================
     5                                  section loader
     6 00000000 6C697A68                  marker       dd "lizh"                              ;内核加载器有效标志  +00
     7 00000004 [00000000]                length       dd ldr_end                             ;内核加载器的长度    +04
     8 00000008 [96010000]                entry        dd start                               ;内核加载器的入口点  +08
     9                                  
    10 0000000C 4D6F7573654865726F-       msg0         db "MouseHero x64 course learning.",0x0d,0x0a
    10 00000015 2078363420636F7572-
    10 0000001E 7365206C6561726E69-
    10 00000027 6E672E0D0A         
    11                                  
    12 0000002C 78363420617661696C-       arch0        db "x64 available(64-bit processor installed).",0x0d,0x0a
    12 00000035 61626C652836342D62-
    12 0000003E 69742070726F636573-
    12 00000047 736F7220696E737461-
    12 00000050 6C6C6564292E0D0A   
    13 00000058 783634206E6F742061-       arch1        db "x64 not available(64-bit processor not installed).",0x0d,0x0a
    13 00000061 7661696C61626C6528-
    13 0000006A 36342D626974207072-
    13 00000073 6F636573736F72206E-
    13 0000007C 6F7420696E7374616C-
    13 00000085 6C6564292E0D0A     
    14                                  
    15 0000008C 50726F636573736F72-       brand_msg    db "Processor:"
    15 00000095 3A                 
    16 00000096 00<rep 30h>                   brand    times 48  db 0
    17 000000C6 0D0A                                   db  0x0d,0x0a
    18                                  
    19 000000C8 506879736963616C20-       cpu_addr     db "Physical address size:"
    19 000000D1 616464726573732073-
    19 000000DA 697A653A           
    20 000000DE 20<rep 3h>                   paddr     times 3 db ' '
    21 000000E1 2C                                     db ","
    22 000000E2 4C696E656172206164-                    db "Linear address size:"
    22 000000EB 64726573732073697A-
    22 000000F4 653A               
    23 000000F6 20<rep 3h>                   laddr     times 3 db ' '
    24 000000F9 0D0A                                   db 0x0d,0x0a
    25                                  
    26 000000FB 50726F74656374206D-       protect      db "Protect mode has been entered to prepare for IA-32e mode.",0x0d,0x0a,0
    26 00000104 6F6465206861732062-
    26 0000010D 65656E20656E746572-
    26 00000116 656420746F20707265-
    26 0000011F 7061726520666F7220-
    26 00000128 49412D333265206D6F-
    26 00000131 64652E0D0A00       
    27                                  
    28 00000137 49412D333265206D6F-       ia_32e       db "IA-32e mode(aka,long mode) is active.Specifically,"
    28 00000140 646528616B612C6C6F-
    28 00000149 6E67206D6F64652920-
    28 00000152 697320616374697665-
    28 0000015B 2E5370656369666963-
    28 00000164 616C6C792C         
    29 00000169 636F6D706174696269-                    db "compatibility mode.",0x0d,0x0a,0
    29 00000172 6C697479206D6F6465-
    29 0000017B 2E0D0A00           
    30                                  ;-------------------------------------------------------------------------
    31                                   no_ia_32e:
    32 0000017F B403                             mov ah, 0x03                                 ;获取光标位置
    33 00000181 B700                             mov bh, 0x00
    34 00000183 CD10                             int 0x10
    35                                  
    36 00000185 BD[5800]                         mov bp, arch1
    37 00000188 B93400                           mov cx, brand_msg - arch1
    38 0000018B B80113                           mov ax, 0x1301                               ;写字符串，光标移动
    39 0000018E B700                             mov bh, 0
    40 00000190 B307                             mov bl, 0x07                                 ;属性：红底亮白字
    41 00000192 CD10                             int 0x10                                     ;显示字符串
    42                                  
    43 00000194 FA                               cli
    44 00000195 F4                               hlt
    45                                  
    46                                    start:
    47 00000196 B403                             mov ah, 0x03                                 ;获取光标位置
    48 00000198 B700                             mov bh, 0x00
    49 0000019A CD10                             int 0x10
    50                                  
    51 0000019C BD[0C00]                         mov bp, msg0
    52 0000019F B92000                           mov cx, arch0 - msg0
    53 000001A2 B80113                           mov ax, 0x1301                               ;写字符串，光标移动
    54 000001A5 B700                             mov bh, 0
    55 000001A7 B34F                             mov bl, 0x4f                                 ;属性：红底亮白字
    56 000001A9 CD10                             int 0x10                                     ;显示字符串
    57                                  
    58 000001AB 66B800000080                     mov eax, 0x80000000                          ;返回处理器支持的最大扩展功能号
    59 000001B1 0FA2                             cpuid
    60 000001B3 663D00000080                     cmp eax, 0x80000000                          ;支持大于0x80000000的功能号？
    61 000001B9 76C4                             jbe no_ia_32e                                ;不支持，转no_ia_32e处执行
    62                                  
    63 000001BB 66B801000080                     mov eax, 0x80000001                          ;返回扩展的签名和特性标志位
    64 000001C1 0FA2                             cpuid                                        ;EDX包含扩展特性标志位
    65 000001C3 660FBAE21D                       bt edx, 29                                   ;EDX的位29是IA-32e模式支持标志
    66                                           ;注意：在VirtualBox虚拟机上，操作系统的版本如果不选择64位，则此标志检测失败。
    67 000001C8 73B5                             jnc no_ia_32e                                ;不支持，转no_ia_32e处执行
    68                                  
    69 000001CA B403                             mov ah, 0x03                                 ;获取光标位置
    70 000001CC B700                             mov bh, 0x00
    71 000001CE CD10                             int 0x10
    72                                  
    73 000001D0 BD[2C00]                         mov bp, arch0
    74 000001D3 B92C00                           mov cx, arch1 - arch0
    75 000001D6 B80113                           mov ax, 0x1301                               ;写字符串，光标移动
    76 000001D9 B700                             mov bh, 0
    77 000001DB B307                             mov bl, 0x07                                 ;属性：黑底白字
    78 000001DD CD10                             int 0x10                                     ;显示字符串
    79                                  
    80                                           ;显示处理器商标信息
    81 000001DF 66B800000080                     mov eax, 0x80000000
    82 000001E5 0FA2                             cpuid                                        ;返回最大支持的扩展功能号
    83 000001E7 663D04000080                     cmp eax, 0x80000004
    84 000001ED 7266                             jb .no_brand
    85                                  
    86 000001EF 66B802000080                     mov eax, 0x80000002
    87 000001F5 0FA2                             cpuid
    88 000001F7 66A3[9600]                       mov [brand + 0x00], eax
    89 000001FB 66891E[9A00]                     mov [brand + 0x04], ebx
    90 00000200 66890E[9E00]                     mov [brand + 0x08], ecx
    91 00000205 668916[A200]                     mov [brand + 0x0c], edx
    92                                  
    93 0000020A 66B803000080                     mov eax, 0x80000003
    94 00000210 0FA2                             cpuid
    95 00000212 66A3[A600]                       mov [brand + 0x10], eax
    96 00000216 66891E[AA00]                     mov [brand + 0x14], ebx
    97 0000021B 66890E[AE00]                     mov [brand + 0x18], ecx
    98 00000220 668916[B200]                     mov [brand + 0x1c], edx
    99                                  
   100 00000225 66B804000080                     mov eax, 0x80000004
   101 0000022B 0FA2                             cpuid
   102 0000022D 66A3[B600]                       mov [brand + 0x20], eax
   103 00000231 66891E[BA00]                     mov [brand + 0x24], ebx
   104 00000236 66890E[BE00]                     mov [brand + 0x28], ecx
   105 0000023B 668916[C200]                     mov [brand + 0x2c], edx
   106                                  
   107 00000240 B403                             mov ah, 0x03                                 ;获取光标位置
   108 00000242 B700                             mov bh, 0x00
   109 00000244 CD10                             int 0x10
   110                                  
   111 00000246 BD[8C00]                         mov bp, brand_msg
   112 00000249 B93C00                           mov cx, cpu_addr - brand_msg
   113 0000024C B80113                           mov ax, 0x1301                               ;写字符串，光标移动
   114 0000024F B700                             mov bh, 0
   115 00000251 B307                             mov bl, 0x07                                 ;属性：黑底白字
   116 00000253 CD10                             int 0x10                                     ;显示字符串
   117                                  
   118                                   .no_brand:
   119                                           ;获取当前系统的物理内存布局信息（使用INT 0x15,E820功能。俗称E820内存）
   120 00000255 06                               push es
   121                                  
   122 00000256 BBE007                           mov bx, SDA_PHY_ADDR >> 4                    ;切换到系统数据区
   123 00000259 8EC3                             mov es, bx
   124 0000025B 26C70616000000                   mov word [es:0x16], 0
   125 00000262 6631DB                           xor ebx, ebx                                 ;首次调用int 0x15时必须为0
   126 00000265 BF1800                           mov di, 0x18                                 ;系统数据区内的偏移
   127                                   .mlookup:
   128 00000268 66B820E80000                     mov eax, 0xe820
   129 0000026E 66B920000000                     mov ecx, 32
   130 00000274 66BA50414D53                     mov edx, 'PAMS'
   131 0000027A CD15                             int 0x15
   132 0000027C 83C720                           add di, 32
   133 0000027F 26FF061600                       inc word [es:0x16]
   134 00000284 6609DB                           or ebx, ebx
   135 00000287 75DF                             jnz .mlookup
   136                                  
   137 00000289 07                               pop es
   138                                  
   139                                           ;获取和存储处理器的物理/虚拟地址尺寸信息
   140 0000028A 66B800000080                     mov eax, 0x80000000                          ;返回最大支持的扩展功能号
   141 00000290 0FA2                             cpuid
   142 00000292 663D08000080                     cmp eax, 0x80000008
   143 00000298 B82430                           mov ax, 0x3024                               ;设置默认的处理器物理/逻辑地址位数36和48
   144 0000029B 7208                             jb .no_plsize
   145                                  
   146 0000029D 66B808000080                     mov eax,0x80000008                           ;处理器线性/物理地址尺寸
   147 000002A3 0FA2                             cpuid
   148                                  
   149                                   .no_plsize:
   150                                           ;保存物理和虚拟地址尺寸到系统数据区
   151 000002A5 1E                               push ds
   152 000002A6 BBE007                           mov bx, SDA_PHY_ADDR >> 4                    ;切换到系统数据区
   153 000002A9 8EDB                             mov ds, bx
   154 000002AB A30000                           mov word [0], ax                             ;记录处理器的物理/虚拟地址尺寸
   155 000002AE 1F                               pop ds
   156                                  
   157                                           ;准备显示存储器的物理地址尺寸信息
   158 000002AF 50                               push ax                                      ;备份AX（中的虚拟地址部分）
   159                                  
   160 000002B0 25FF00                           and ax, 0x00ff                               ;保留物理地址宽度部分
   161 000002B3 BE0200                           mov si, 2
   162 000002B6 B30A                             mov bl, 10
   163                                   .re_div0:
   164 000002B8 F6F3                             div bl
   165 000002BA 80C430                           add ah, 0x30
   166 000002BD 88A4[DE00]                       mov [paddr + si], ah
   167 000002C1 4E                               dec si
   168 000002C2 25FF00                           and ax, 0x00ff
   169 000002C5 75F1                             jnz .re_div0
   170                                  
   171                                           ;准备显示处理器的虚拟地址尺寸信息
   172 000002C7 58                               pop ax
   173                                  
   174 000002C8 C1E808                           shr ax, 8                                    ;保留线性地址宽度部分
   175 000002CB BE0200                           mov si, 2
   176 000002CE B30A                             mov bl, 10
   177                                   .re_div1:
   178 000002D0 F6F3                             div bl
   179 000002D2 80C430                           add ah, 0x30
   180 000002D5 88A4[F600]                       mov [laddr + si], ah
   181 000002D9 4E                               dec si
   182 000002DA 25FF00                           and ax, 0x00ff
   183 000002DD 75F1                             jnz .re_div1
   184                                  
   185                                           ;显示处理器的物理/虚拟地址尺寸信息
   186 000002DF B403                             mov ah, 0x03                                 ;获取光标位置
   187 000002E1 B700                             mov bh, 0x00
   188 000002E3 CD10                             int 0x10
   189                                  
   190 000002E5 BD[C800]                         mov bp, cpu_addr
   191 000002E8 B93300                           mov cx, protect - cpu_addr
   192 000002EB B80113                           mov ax, 0x1301                               ;写字符串，光标移动
   193 000002EE B700                             mov bh, 0
   194 000002F0 B307                             mov bl, 0x07                                 ;属性：黑底白字
   195 000002F2 CD10                             int 0x10                                     ;显示字符串
   196                                  
   197                                           ;以下开始进入保护模式，为IA-32e模式做必要的准备工作
   198 000002F4 B80010                           mov ax, GDT_PHY_ADDR >> 4                    ;计算GDT所在的逻辑段地址
   199 000002F7 8ED8                             mov ds, ax
   200                                  
   201                                           ;跳过0#号描述符的槽位
   202                                           ;创建1#描述符，保护模式下的代码段描述符
   203 000002F9 66C7060800FFFF0000               mov dword [0x08], 0x0000ffff                 ;基地址为0，界限0xFFFFF，DPL=00
   204 00000302 66C7060C000098CF00               mov dword [0x0c], 0x00cf9800                 ;4KB粒度，代码段描述符，向上扩展
   205                                  
   206                                           ;创建2#描述符，保护模式下的数据段和堆栈段描述符
   207 0000030B 66C7061000FFFF0000               mov dword [0x10], 0x0000ffff                 ;基地址为0，界限0xFFFFF，DPL=00
   208 00000314 66C70614000092CF00               mov dword [0x14], 0x00cf9200                 ;4KB粒度，数据段描述符，向上扩展
   209                                  
   210                                           ;创建3#描述符，64位模式下的代码段描述符。为进入64位提前作准备，其L位是1
   211 0000031D 66C7061800FFFF0000               mov dword [0x18], 0x0000ffff                 ;基地址为0，界限0xFFFFF，DPL=00
   212 00000326 66C7061C000098AF00               mov dword [0x1c], 0x00af9800                 ;4KB粒度，L=1，代码段描述符，向上扩展
   213                                  
   214                                  
   215                                           ;记录GDT的基地址和界限值
   216 0000032F B8E007                           mov ax, SDA_PHY_ADDR >> 4                    ;切换到系统数据区
   217 00000332 8ED8                             mov ds, ax
   218                                  
   219 00000334 C70602001F00                     mov word [2], 31                             ;描述符表的界限
   220 0000033A 66C706040000000100               mov dword [4], GDT_PHY_ADDR                  ;GDT的线性基地址
   221                                  
   222                                           ;加载描述符表寄存器GDTR
   223 00000343 0F01160200                       lgdt [2]
   224                                  
   225 00000348 E492                             in al, 0x92                                  ;南桥芯片内的端口
   226 0000034A 0C02                             or al, 0000_0010B
   227 0000034C E692                             out 0x92, al                                 ;打开A20
   228                                  
   229 0000034E FA                               cli                                          ;中断机制尚未工作
   230                                  
   231 0000034F 0F20C0                           mov eax, cr0
   232 00000352 6683C801                         or eax, 1
   233 00000356 0F22C0                           mov cr0, eax                                 ;设置PE位
   234                                  
   235                                           ;以下进入保护模式... ...
   236 00000359 66EA[61F30000]0800               jmp 0x0008: dword LDR_PHY_ADDR + flush       ;16位的描述符选择子：32位偏移
   237                                                                                        ;清流水线并串行化处理器
   238                                           [bits 32]
   239                                    flush:
   240 00000361 B810000000                       mov eax, 0x0010                              ;加载数据段(4GB)选择子
   241 00000366 8ED8                             mov ds, eax
   242 00000368 8EC0                             mov es, eax
   243 0000036A 8EE0                             mov fs, eax
   244 0000036C 8EE8                             mov gs, eax
   245 0000036E 8ED0                             mov ss, eax                                  ;加载堆栈段(4GB)选择子
   246 00000370 BC007C0000                       mov esp, 0x7c00                              ;堆栈指针
   247                                  
   248                                           ;显示信息，表明我们正在保护模式下为进入IA-32e模式做准备
   249 00000375 BB[FBF00000]                     mov ebx, protect + LDR_PHY_ADDR
   250 0000037A E85F010000                       call put_string_flat32
   251                                  
   252                                           ;以下加载系统核心程序
   253 0000037F BF00000200                       mov edi, CORE_PHY_ADDR
   254                                  
   255 00000384 B809000000                       mov eax, COR_START_SECTOR
   256 00000389 89FB                             mov ebx, edi                                 ;起始地址
   257 0000038B E8F9010000                       call read_hard_disk_0                        ;以下读取程序的起始部分（一个扇区）
   258                                  
   259                                           ;以下判断整个程序有多大
   260 00000390 8B07                             mov eax, [edi]                               ;核心程序尺寸
   261 00000392 31D2                             xor edx, edx
   262 00000394 B900020000                       mov ecx, 512                                 ;512字节每扇区
   263 00000399 F7F1                             div ecx
   264                                  
   265 0000039B 09D2                             or edx, edx
   266 0000039D 7501                             jnz @1                                       ;未除尽，因此结果比实际扇区数少1
   267 0000039F 48                               dec eax                                      ;已经读了一个扇区，扇区总数减1
   268                                     @1:
   269 000003A0 09C0                             or eax, eax                                  ;考虑实际长度≤512个字节的情况
   270 000003A2 7410                             jz pge                                       ;EAX=0 ?
   271                                  
   272                                           ;读取剩余的扇区
   273 000003A4 89C1                             mov ecx, eax                                 ;32位模式下的LOOP使用ECX
   274 000003A6 B809000000                       mov eax, COR_START_SECTOR
   275 000003AB 40                               inc eax                                      ;从下一个逻辑扇区接着读
   276                                     @2:
   277 000003AC E8D8010000                       call read_hard_disk_0
   278 000003B1 40                               inc eax
   279 000003B2 E2F8                             loop @2                                      ;循环读，直到读完整个内核
   280                                  
   281                                     pge:
   282                                           ;回填内核加载的位置信息（物理/线性地址）到内核程序头部
   283 000003B4 C70508000200000002-              mov dword [CORE_PHY_ADDR + 0x08], CORE_PHY_ADDR
   283 000003BD 00                 
   284 000003BE C7050C000200000000-              mov dword [CORE_PHY_ADDR + 0x0c], 0
   284 000003C7 00                 
   285                                  
   286                                           ;准备打开分页机制。先确定分页模式（4级或者5级）
   287                                           ;cmp [sda_phy_addr],57                        ;要求使用5级分页吗？
   288                                           ;jz to_5level_page                            ;转5级分页代码
   289                                  
   290                                           ;以下为内核创建4级分页系统，只包含基本部分，覆盖低端1MB物理内存
   291                                  
   292                                           ;>>>>>>>>>>>>>>>>>>>>>>>>>1.创建内核4级头表>>>>>>>>>>>>>>>>>>>>>>>>>>
   293 000003C8 BB00A00000                       mov ebx, PML4_PHY_ADDR                       ;4级头表的物理地址
   294                                  
   295                                           ;4级头表的内容清零
   296 000003CD B900040000                       mov ecx, 1024
   297 000003D2 31F6                             xor esi, esi
   298                                     .cls0:
   299 000003D4 C7043300000000                   mov dword [ebx + esi], 0
   300 000003DB 83C604                           add esi, 4
   301 000003DE E2F4                             loop .cls0
   302                                  
   303                                           ;在4级头表内创建指向4级头表自己的表项
   304 000003E0 C783F80F000003A000-              mov dword [ebx + 511 * 8], PML4_PHY_ADDR | 3 ;添加属性位
   304 000003E9 00                 
   305 000003EA C783FC0F0000000000-              mov dword [ebx + 511 * 8 + 4], 0
   305 000003F3 00                 
   306                                  
   307                                           ;在4级头表内创建与低端2MB内存对应的4级头表项。
   308                                           ;即，与线性地址范围：0x0000000000000000--0x00000000001FFFFF对应的4级头表项
   309                                           ;此表项为保证低端2MB物理内存（含内核）在开启分页之后及映射到高端之前可正常访问
   310 000003F4 C70303B00000                     mov dword [ebx + 0 * 8], PDPT_PHY_ADDR | 3   ;页目录指针表的物理地址及属性
   311 000003FA C7430400000000                   mov dword [ebx + 0 * 8 + 4], 0
   312                                  
   313                                           ;将页目录指针表的内容清零
   314 00000401 BB00B00000                       mov ebx, PDPT_PHY_ADDR
   315                                  
   316 00000406 B900040000                       mov ecx, 1024
   317 0000040B 31F6                             xor esi, esi
   318                                     .cls1:
   319 0000040D C7043300000000                   mov dword [ebx + esi], 0
   320 00000414 83C604                           add esi, 4
   321 00000417 E2F4                             loop .cls1
   322                                  
   323                                           ;在页目录指针表内创建与低端2MB内存对应的表项。
   324                                           ;即，与线性地址范围：0x0000000000000000--0x00000000001FFFFF对应的表项
   325 00000419 C70303C00000                     mov dword [ebx + 0 * 8], PDT_PHY_ADDR | 3    ;页目录表的物理地址及属性
   326 0000041F C7430400000000                   mov dword [ebx + 0 * 8 + 4], 0
   327                                  
   328                                           ;将页目录表的内容清零
   329 00000426 BB00C00000                       mov ebx, PDT_PHY_ADDR
   330                                  
   331 0000042B B900040000                       mov ecx, 1024
   332 00000430 31F6                             xor esi, esi
   333                                     .cls2:
   334 00000432 C7043300000000                   mov dword [ebx + esi], 0
   335 00000439 83C604                           add esi, 4
   336 0000043C E2F4                             loop .cls2
   337                                  
   338                                           ;在页目录表内创建与低端2MB内存对应的表项。
   339                                           ;即，与线性地址范围：0x0000000000000000--0x00000000001FFFFF对应的表项
   340 0000043E C70383000000                     mov dword [ebx + 0 * 8], 0 | 0x83            ;2MB页的物理地址及属性
   341 00000444 C7430400000000                   mov dword [ebx + 0 * 8 + 4], 0
   342                                  
   343                                  
   344                                           ;在4级头表内创建与线性地址范围0xFFFF800000000000--0xFFFF8000001FFFFF对应的
   345                                           ;4级头表项，将内核映射到高端。内核进入IA-32e模式后应当工作在线性地址高端。
   346 0000044B BB00A00000                       mov ebx, PML4_PHY_ADDR
   347                                  
   348 00000450 C7830008000003B000-              mov dword [ebx + 256 * 8], PDPT_PHY_ADDR | 3 ;页目录指针表的物理地址及属性
   348 00000459 00                 
   349 0000045A C78304080000000000-              mov dword [ebx + 256 * 8 + 4], 0
   349 00000463 00                 
   350                                  
   351                                           ;在4级头表的高一半预先创建额外的254个头表项
   352 00000464 B801010000                       mov eax, 257
   353 00000469 BA03001000                       mov edx, COR_PDPT_ADDR | 3                   ;从这个地址开始是内核的254个页目录指针表
   354                                     .fill_pml4:
   355 0000046E 8914C3                           mov dword [ebx + eax * 8], edx
   356 00000471 C744C30400000000                 mov dword [ebx + eax * 8 + 4], 0
   357 00000479 81C200100000                     add edx, 0x1000
   358 0000047F 40                               inc eax
   359 00000480 3DFE010000                       cmp eax, 510
   360 00000485 76E7                             jbe .fill_pml4
   361                                  
   362                                           ;将预分配的所有页目录指针表都统统清零
   363 00000487 B800001000                       mov eax, COR_PDPT_ADDR
   364                                     .zero_pdpt:
   365 0000048C C70000000000                     mov dword [eax], 0                           ;相当于将所有页目录指针项清零
   366 00000492 83C004                           add eax, 4
   367 00000495 3D00E01F00                       cmp eax, COR_PDPT_ADDR + 0x1000 * 254        ;内核所有页目录指针表的结束位置
   368 0000049A 72F0                             jb .zero_pdpt
   369                                  
   370                                           ;令CR3寄存器指向4级头表（保护模式下的32位CR3）
   371 0000049C B800A00000                       mov eax, PML4_PHY_ADDR                       ;PCD=PWT=0
   372 000004A1 0F22D8                           mov cr3, eax
   373                                  
   374                                           ;开启物理地址扩展PAE
   375 000004A4 0F20E0                           mov eax, cr4
   376 000004A7 0FBAE805                         bts eax, 5
   377 000004AB 0F22E0                           mov cr4, eax
   378                                  
   379                                           ;设置型号专属寄存器IA32_EFER.LME，允许IA_32e模式
   380 000004AE B9800000C0                       mov ecx, 0x0c0000080                         ;指定型号专属寄存器IA32_EFER
   381 000004B3 0F32                             rdmsr
   382 000004B5 0FBAE808                         bts eax, 8                                   ;设置LME位
   383 000004B9 0F30                             wrmsr
   384                                  
   385                                           ;开启分页功能
   386 000004BB 0F20C0                           mov eax, cr0
   387 000004BE 0FBAE81F                         bts eax, 31                                  ;置位CR0.PG
   388 000004C2 0F22C0                           mov cr0, eax
   389                                  
   390                                           ;打印IA_32e激活信息
   391 000004C5 BB[37F10000]                     mov ebx, ia_32e + LDR_PHY_ADDR
   392 000004CA E80F000000                       call put_string_flat32
   393                                  
   394                                           ;通过远返回方式进入64位模式的内核
   395 000004CF 666A18                           push word 0x0018                             ;已定义为常量CORE_CODE64_SEL
   396 000004D2 A104000200                       mov eax, dword [CORE_PHY_ADDR + 4]
   397 000004D7 0500000200                       add eax, CORE_PHY_ADDR
   398 000004DC 50                               push eax
   399 000004DD CB                               retf
   400                                  
   401                                  ;-----------------------------------------------------------------------
   402                                  ;带光标跟随的字符串显示例程。只运行在32位保护模式下，且使用平坦模型。
   403                                  put_string_flat32:                                    ;显示0终止的字符串并移动光标
   404                                                                                        ;输入：EBX=字符串的线性地址
   405                                  
   406 000004DE 53                               push ebx
   407 000004DF 51                               push ecx
   408                                  
   409                                    .getc:
   410 000004E0 8A0B                             mov cl, [ebx]
   411 000004E2 08C9                             or cl, cl                                    ;检测串结束标志（0）
   412 000004E4 7408                             jz .exit                                     ;显示完毕，返回
   413 000004E6 E806000000                       call put_char
   414 000004EB 43                               inc ebx
   415 000004EC EBF2                             jmp .getc
   416                                  
   417                                    .exit:
   418 000004EE 59                               pop ecx
   419 000004EF 5B                               pop ebx
   420                                  
   421 000004F0 C3                               ret                                          ;段内返回
   422                                  
   423                                  ;-------------------------------------------------------------------------------
   424                                  put_char:                                             ;在当前光标处显示一个字符,并推进光标。
   425                                                                                        ;仅用于段内调用
   426                                                                                        ;输入：CL=字符ASCII码
   427 000004F1 60                               pushad
   428                                  
   429                                           ;以下取当前光标位置
   430 000004F2 66BAD403                         mov dx, 0x3d4
   431 000004F6 B00E                             mov al, 0x0e
   432 000004F8 EE                               out dx, al
   433 000004F9 6642                             inc dx                                       ;0x3d5
   434 000004FB EC                               in al, dx                                    ;高字
   435 000004FC 88C4                             mov ah, al
   436                                  
   437 000004FE 664A                             dec dx                                       ;0x3d4
   438 00000500 B00F                             mov al, 0x0f
   439 00000502 EE                               out dx, al
   440 00000503 6642                             inc dx                                       ;0x3d5
   441 00000505 EC                               in al, dx                                    ;低字
   442 00000506 6689C3                           mov bx, ax                                   ;BX=代表光标位置的16位数
   443 00000509 81E3FFFF0000                     and ebx, 0x0000ffff                          ;准备使用32位寻址方式访问显存
   444                                  
   445 0000050F 80F90D                           cmp cl, 0x0d                                 ;回车符？
   446 00000512 750E                             jnz .put_0a
   447 00000514 6689D8                           mov ax, bx
   448 00000517 B350                             mov bl, 80
   449 00000519 F6F3                             div bl
   450 0000051B F6E3                             mul bl
   451 0000051D 6689C3                           mov bx, ax
   452 00000520 EB4F                             jmp .set_cursor
   453                                  
   454                                    .put_0a:
   455 00000522 80F90A                           cmp cl, 0x0a                                 ;换行符？
   456 00000525 7506                             jnz .put_other
   457 00000527 6683C350                         add bx, 80
   458 0000052B EB0E                             jmp .roll_screen
   459                                  
   460                                    .put_other:                                         ;正常显示字符
   461 0000052D 66D1E3                           shl bx, 1
   462 00000530 888B00800B00                     mov [0xb8000 + ebx], cl
   463                                  
   464                                           ;以下将光标位置推进一个字符
   465 00000536 66D1EB                           shr bx, 1
   466 00000539 6643                             inc bx
   467                                  
   468                                    .roll_screen:
   469 0000053B 6681FBD007                       cmp bx, 2000                                 ;光标超出屏幕？滚屏
   470 00000540 7C2F                             jl .set_cursor
   471                                  
   472 00000542 53                               push ebx
   473                                  
   474 00000543 FC                               cld
   475 00000544 BEA0800B00                       mov esi, 0xb80a0                             ;小心！32位模式下movsb/w/d
   476 00000549 BF00800B00                       mov edi, 0xb8000                             ;使用的是esi/edi/ecx
   477 0000054E B9C0030000                       mov ecx, 960
   478 00000553 F3A5                             rep movsd
   479 00000555 BB000F0000                       mov ebx, 3840                                ;清除屏幕最底一行
   480 0000055A B950000000                       mov ecx, 80                                  ;32位程序应该使用ECX
   481                                    .cls:
   482 0000055F 66C78300800B002007               mov word[0xb8000 + ebx], 0x0720
   483 00000568 83C302                           add ebx, 2
   484 0000056B E2F2                             loop .cls
   485                                  
   486 0000056D 5B                               pop ebx
   487 0000056E 83EB50                           sub ebx, 80
   488                                  
   489                                    .set_cursor:
   490 00000571 66BAD403                         mov dx, 0x3d4
   491 00000575 B00E                             mov al, 0x0e
   492 00000577 EE                               out dx, al
   493 00000578 6642                             inc dx                                       ;0x3d5
   494 0000057A 88F8                             mov al, bh
   495 0000057C EE                               out dx, al
   496 0000057D 664A                             dec dx                                       ;0x3d4
   497 0000057F B00F                             mov al, 0x0f
   498 00000581 EE                               out dx, al
   499 00000582 6642                             inc dx                                       ;0x3d5
   500 00000584 88D8                             mov al, bl
   501 00000586 EE                               out dx, al
   502                                  
   503 00000587 61                               popad
   504                                  
   505 00000588 C3                               ret
   506                                  ;-------------------------------------------------------------------------
   507                                  read_hard_disk_0:                                     ;从硬盘读取一个逻辑扇区
   508                                                                                        ;EAX=逻辑扇区号
   509                                                                                        ;EBX=目标缓冲区地址
   510                                                                                        ;返回：EBX=EBX+512
   511 00000589 50                               push eax
   512 0000058A 51                               push ecx
   513 0000058B 52                               push edx
   514                                  
   515 0000058C 50                               push eax
   516                                  
   517 0000058D 66BAF201                         mov dx, 0x1f2
   518 00000591 B001                             mov al, 1
   519 00000593 EE                               out dx, al                                   ;读取的扇区数
   520                                  
   521 00000594 6642                             inc dx                                       ;0x1f3
   522 00000596 58                               pop eax
   523 00000597 EE                               out dx, al                                   ;LBA地址7~0
   524                                  
   525 00000598 6642                             inc dx                                       ;0x1f4
   526 0000059A B108                             mov cl, 8
   527 0000059C D3E8                             shr eax, cl
   528 0000059E EE                               out dx, al                                   ;LBA地址15~8
   529                                  
   530 0000059F 6642                             inc dx                                       ;0x1f5
   531 000005A1 D3E8                             shr eax, cl
   532 000005A3 EE                               out dx, al                                   ;LBA地址23~16
   533                                  
   534 000005A4 6642                             inc dx                                       ;0x1f6
   535 000005A6 D3E8                             shr eax, cl
   536 000005A8 0CE0                             or al, 0xe0                                  ;第一硬盘  LBA地址27~24
   537 000005AA EE                               out dx, al
   538                                  
   539 000005AB 6642                             inc dx
   540                                                                                        ;0x1f7
   541 000005AD B020                             mov al, 0x20                                 ;读命令
   542 000005AF EE                               out dx, al
   543                                  
   544                                    .waits:
   545 000005B0 EC                               in al, dx
   546 000005B1 A808                             test al, 8
   547 000005B3 74FB                             jz .waits                                   ;不忙，且硬盘已准备好数据传输
   548                                  
   549 000005B5 B900010000                       mov ecx, 256                                 ;总共要读取的字数
   550 000005BA 66BAF001                         mov dx, 0x1f0
   551                                    .readw:
   552 000005BE 66ED                             in ax, dx
   553 000005C0 668903                           mov [ebx], ax
   554 000005C3 83C302                           add ebx, 2
   555 000005C6 E2F6                             loop .readw
   556                                  
   557 000005C8 5A                               pop edx
   558 000005C9 59                               pop ecx
   559 000005CA 58                               pop eax
   560                                  
   561 000005CB C3                               ret
   562                                  
   563                                  ;-------------------------------------------------------------------------------
   564                                  section trail
   565                                    ldr_end:
