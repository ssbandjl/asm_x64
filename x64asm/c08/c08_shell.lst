     1                                  ;c08_shell：系统外壳程序，李忠，2022-11-27。
     2                                  ;用于模拟一个操作系统用户接口，比如Linux控制台
     3                                  
     4                                  ;===============================================================================
     5                                  section shell_header                              ;外壳程序头部
     6 00000000 [4101000000000000]        length       dq shell_end                       ;#0：外壳程序的总长度（字节数）
     7 00000008 [3C01000000000000]        entry        dq start                           ;#8：外壳入口点
     8 00000010 0000000000000000          linear       dq 0                               ;#16：外壳加载的虚拟（线性）地址
     9                                  
    10                                  ;===============================================================================
    11                                  section shell_data                                ;外壳程序数据段
    12 00000000 00<rep 80h>               shell_msg    times 128 db 0
    13                                  
    14 00000080 5468726561642000          msg0         db "Thread ", 0
    15 00000088 00<rep 20h>               tid          times 32 db 0                      ;线程ID的文本
    16 000000A8 203C4F53205348454C-       msg1         db " <OS SHELL> on CPU ", 0
    16 000000B1 4C3E206F6E20435055-
    16 000000BA 2000               
    17 000000BC 00<rep 20h>               pcpu         times 32 db 0                      ;处理器编号的文本
    18 000000DC 202D00                    msg2         db " -", 0
    19                                  
    20 000000DF 00<rep 20h>               time_buff    times 32 db 0                      ;当前时间的文本
    21                                  
    22                                  
    23                                  ;===============================================================================
    24                                  section shell_code                                ;外壳程序代码段
    25                                  
    26                                  %include "..\common\user_static64.lib"
    27                              <1> ;user_static64.lib:用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件
    28                              <1> ;中实现，但有些功能需要通过syscall指令使用内核提供的系统调用。
    29                              <1> ;创建时间：2022-01-30 18:30，李忠
    30                              <1> ;此文件需要用预处理指令%include引入用户程序。
    31                              <1> 
    32                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    33                              <1>          bits 64
    34                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    35                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    36                              <1>                                                   ;输入：R8=64位二进制数
    37                              <1>                                                   ;      RBX=目标缓冲区线性地址
    38 00000000 50                  <1>          push rax
    39 00000001 53                  <1>          push rbx
    40 00000002 51                  <1>          push rcx
    41 00000003 52                  <1>          push rdx
    42 00000004 4150                <1>          push r8
    43                              <1> 
    44 00000006 490FBAE03F          <1>          bt r8, 63
    45 0000000B 7309                <1>          jnc .begin
    46 0000000D C6032D              <1>          mov byte [rbx], '-'
    47 00000010 49F7D8              <1>          neg r8
    48 00000013 48FFC3              <1>          inc rbx
    49                              <1>   .begin:
    50 00000016 4C89C0              <1>          mov rax, r8                              ;!!
    51 00000019 41B80A000000        <1>          mov r8, 10
    52 0000001F 4831C9              <1>          xor rcx, rcx
    53                              <1> 
    54                              <1>   .next_div:
    55 00000022 4831D2              <1>          xor rdx, rdx
    56 00000025 49F7F0              <1>          div r8
    57 00000028 52                  <1>          push rdx                                 ;保存分解的数位
    58 00000029 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    59 0000002C 4809C0              <1>          or rax, rax                              ;商为0？
    60 0000002F 7402                <1>          jz .rotate
    61 00000031 EBEF                <1>          jmp .next_div
    62                              <1> 
    63                              <1>   .rotate:
    64 00000033 5A                  <1>          pop rdx
    65 00000034 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    66 00000037 8813                <1>          mov [rbx], dl
    67 00000039 48FFC3              <1>          inc rbx
    68 0000003C E2F5                <1>          loop .rotate
    69                              <1> 
    70 0000003E C60300              <1>          mov byte [rbx], 0
    71                              <1> 
    72 00000041 4158                <1>          pop r8
    73 00000043 5A                  <1>          pop rdx
    74 00000044 59                  <1>          pop rcx
    75 00000045 5B                  <1>          pop rbx
    76 00000046 58                  <1>          pop rax
    77                              <1> 
    78 00000047 C3                  <1>          ret                                      ;段内返回
    79                              <1> 
    80                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    81                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    82                              <1>                                                   ;输入：RSI=源字符串的线性地址
    83                              <1>                                                   ;      RDI=目的字符串的线性地址
    84 00000048 50                  <1>          push rax
    85 00000049 56                  <1>          push rsi
    86 0000004A 57                  <1>          push rdi
    87                              <1> 
    88                              <1>   .r0:
    89 0000004B 803F00              <1>          cmp byte [rdi], 0
    90 0000004E 7405                <1>          jz .r1
    91 00000050 48FFC7              <1>          inc rdi
    92 00000053 EBF6                <1>          jmp .r0
    93                              <1> 
    94                              <1>   .r1:
    95 00000055 8A06                <1>          mov al, [rsi]
    96 00000057 8807                <1>          mov [rdi], al
    97 00000059 3C00                <1>          cmp al, 0
    98 0000005B 7408                <1>          jz .r2
    99 0000005D 48FFC6              <1>          inc rsi
   100 00000060 48FFC7              <1>          inc rdi
   101 00000063 EBF0                <1>          jmp .r1
   102                              <1> 
   103                              <1>   .r2:
   104 00000065 5F                  <1>          pop rdi
   105 00000066 5E                  <1>          pop rsi
   106 00000067 58                  <1>          pop rax
   107                              <1> 
   108 00000068 C3                  <1>          ret
   109                              <1> 
   110                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   111                              <1> 
    27                                  
    28                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    29                                           bits 64
    30                                  
    31                                  main:
    32                                           ;这里可显示一个界面，比如Windows桌面或者Linux控制台窗口，用于接收用户
    33                                           ;输入的命令，包括显示磁盘文件、设置系统参数或者运行一个程序。我们的系
    34                                           ;统很简单，所以不提供这些功能。
    35                                  
    36                                           ;以下， 模拟按用户的要求运行3个程序......
    37 00000069 41B864000000                     mov r8, 100
    38 0000006F B803000000                       mov rax, 3
    39 00000074 0F05                             syscall
    40                                           ;syscall
    41                                           ;syscall                                  ;用同一个副本创建3个任务
    42                                  
    43 00000076 B800000000                       mov rax, 0
    44 0000007B 0F05                             syscall                                  ;可用显示行，DH=行号
    45 0000007D B200                             mov dl, 0
    46 0000007F 41B15F                           mov r9b, 0x5f
    47                                  
    48 00000082 4C8B25(10000000)                 mov r12, [rel linear]
    49                                    _time:
    50 00000089 498D9C24[DF000000]               lea rbx, [r12 + time_buff]
    51 00000091 B801000000                       mov rax, 1
    52 00000096 0F05                             syscall
    53                                  
    54 00000098 B806000000                       mov rax, 6                               ;获得当前处理器的编号
    55 0000009D 0F05                             syscall
    56 0000009F 4989C0                           mov r8, rax
    57 000000A2 498D9C24[BC000000]               lea rbx, [r12 + pcpu]
    58 000000AA E851FFFFFF                       call bin64_to_dec                        ;将处理器的编号转换为字符串
    59                                  
    60 000000AF B808000000                       mov rax, 8                               ;返回当前线程的标识
    61 000000B4 0F05                             syscall
    62 000000B6 4989C0                           mov r8, rax
    63 000000B9 498D9C24[88000000]               lea rbx, [r12 + tid]
    64 000000C1 E83AFFFFFF                       call bin64_to_dec                        ;将线程标识转换为字符串
    65                                  
    66 000000C6 498DBC24[00000000]               lea rdi, [r12 + shell_msg]
    67 000000CE C60700                           mov byte [rdi], 0
    68                                  
    69 000000D1 498DB424[80000000]               lea rsi, [r12 + msg0]
    70 000000D9 E86AFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    71                                  
    72 000000DE 498DB424[88000000]               lea rsi, [r12 + tid]
    73 000000E6 E85DFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    74                                  
    75 000000EB 498DB424[A8000000]               lea rsi, [r12 + msg1]
    76 000000F3 E850FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    77                                  
    78 000000F8 498DB424[BC000000]               lea rsi, [r12 + pcpu]
    79 00000100 E843FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    80                                  
    81 00000105 498DB424[DC000000]               lea rsi, [r12 + msg2]
    82 0000010D E836FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    83                                  
    84 00000112 498DB424[DF000000]               lea rsi, [r12 + time_buff]
    85 0000011A E829FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    86                                  
    87 0000011F 4889FB                           mov rbx, rdi
    88 00000122 B802000000                       mov rax, 2
    89 00000127 0F05                             syscall
    90                                  
    91                                           ;以下5行是本章新增的代码
    92 00000129 52                               push rdx                                 ;在前面用来保存屏幕坐标数据
    93 0000012A B80F000000                       mov rax, 15                              ;当前线程休眠
    94 0000012F BA0A000000                       mov rdx, 10                              ;休眠时间为10个55ms。即550ms
    95 00000134 0F05                             syscall
    96 00000136 5A                               pop rdx
    97                                  
    98 00000137 E94DFFFFFF                       jmp _time
    99                                  
   100                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   101                                  start:    ;程序的入口点
   102 0000013C E828FFFFFF                       call main
   103                                  
   104                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   105                                  shell_end:
