     1                                  ;应用程序，李忠，2022-11-27
     2                                  ;文件：c08_userapp1.asm
     3                                  ;演示数据竞争和锁定的原子操作
     4                                  
     5                                  ;===============================================================================
     6                                  section app_header                                ;应用程序头部
     7 00000000 [0803000000000000]        length       dq app_end                         ;#0：用户程序的总长度（字节数）
     8 00000008 [FC02000000000000]        entry        dq start                           ;#8：用户程序入口点
     9 00000010 0000000000000000          linear       dq 0                               ;#16：用户程序加载的虚拟（线性）地址
    10                                  
    11                                  ;===============================================================================
    12                                  section app_data                                  ;应用程序数据段
    13                                  
    14 00000000 5468726561642000          tid_prex     db "Thread ", 0
    15 00000008 2068617320636F6D70-       thrd_msg     db " has completed the calculation.", 0
    15 00000011 6C6574656420746865-
    15 0000001A 2063616C63756C6174-
    15 00000023 696F6E2E00         
    16 00000028 0000000000000000          share_d      dq 0
    17                                  
    18                                  ;===============================================================================
    19                                  section app_code                                  ;应用程序代码段
    20                                  
    21                                  %include "..\common\user_static64.lib"
    22                              <1> ;user_static64.lib:用户程序使用的例程库，用来模拟高级语言的静态库。有些功能直接在本文件
    23                              <1> ;中实现，但有些功能需要通过syscall指令使用内核提供的系统调用。
    24                              <1> ;创建时间：2022-01-30 18:30，李忠
    25                              <1> ;此文件需要用预处理指令%include引入用户程序。
    26                              <1> 
    27                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    28                              <1>          bits 64
    29                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    30                              <1> bin64_to_dec:                                     ;将二进制数转换为十进制字符串。
    31                              <1>                                                   ;输入：R8=64位二进制数
    32                              <1>                                                   ;      RBX=目标缓冲区线性地址
    33 00000000 50                  <1>          push rax
    34 00000001 53                  <1>          push rbx
    35 00000002 51                  <1>          push rcx
    36 00000003 52                  <1>          push rdx
    37 00000004 4150                <1>          push r8
    38                              <1> 
    39 00000006 490FBAE03F          <1>          bt r8, 63
    40 0000000B 7309                <1>          jnc .begin
    41 0000000D C6032D              <1>          mov byte [rbx], '-'
    42 00000010 49F7D8              <1>          neg r8
    43 00000013 48FFC3              <1>          inc rbx
    44                              <1>   .begin:
    45 00000016 4C89C0              <1>          mov rax, r8                              ;!!
    46 00000019 41B80A000000        <1>          mov r8, 10
    47 0000001F 4831C9              <1>          xor rcx, rcx
    48                              <1> 
    49                              <1>   .next_div:
    50 00000022 4831D2              <1>          xor rdx, rdx
    51 00000025 49F7F0              <1>          div r8
    52 00000028 52                  <1>          push rdx                                 ;保存分解的数位
    53 00000029 48FFC1              <1>          inc rcx                                  ;递增压栈的次数
    54 0000002C 4809C0              <1>          or rax, rax                              ;商为0？
    55 0000002F 7402                <1>          jz .rotate
    56 00000031 EBEF                <1>          jmp .next_div
    57                              <1> 
    58                              <1>   .rotate:
    59 00000033 5A                  <1>          pop rdx
    60 00000034 80C230              <1>          add dl, 0x30                             ;数位转换成ASCII编码
    61 00000037 8813                <1>          mov [rbx], dl
    62 00000039 48FFC3              <1>          inc rbx
    63 0000003C E2F5                <1>          loop .rotate
    64                              <1> 
    65 0000003E C60300              <1>          mov byte [rbx], 0
    66                              <1> 
    67 00000041 4158                <1>          pop r8
    68 00000043 5A                  <1>          pop rdx
    69 00000044 59                  <1>          pop rcx
    70 00000045 5B                  <1>          pop rbx
    71 00000046 58                  <1>          pop rax
    72                              <1> 
    73 00000047 C3                  <1>          ret                                      ;段内返回
    74                              <1> 
    75                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    76                              <1> string_concatenates:                              ;将源字符串连接到目的字符串的尾部
    77                              <1>                                                   ;输入：RSI=源字符串的线性地址
    78                              <1>                                                   ;      RDI=目的字符串的线性地址
    79 00000048 50                  <1>          push rax
    80 00000049 56                  <1>          push rsi
    81 0000004A 57                  <1>          push rdi
    82                              <1> 
    83                              <1>   .r0:
    84 0000004B 803F00              <1>          cmp byte [rdi], 0
    85 0000004E 7405                <1>          jz .r1
    86 00000050 48FFC7              <1>          inc rdi
    87 00000053 EBF6                <1>          jmp .r0
    88                              <1> 
    89                              <1>   .r1:
    90 00000055 8A06                <1>          mov al, [rsi]
    91 00000057 8807                <1>          mov [rdi], al
    92 00000059 3C00                <1>          cmp al, 0
    93 0000005B 7408                <1>          jz .r2
    94 0000005D 48FFC6              <1>          inc rsi
    95 00000060 48FFC7              <1>          inc rdi
    96 00000063 EBF0                <1>          jmp .r1
    97                              <1> 
    98                              <1>   .r2:
    99 00000065 5F                  <1>          pop rdi
   100 00000066 5E                  <1>          pop rsi
   101 00000067 58                  <1>          pop rax
   102                              <1> 
   103 00000068 C3                  <1>          ret
   104                              <1> 
   105                              <1> ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   106                              <1> 
    22                                  
    23                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    24                                           bits 64
    25                                  
    26                                  thread_procedure1:
    27 00000069 4889E5                           mov rbp, rsp                             ;RBP访问栈中数据，高级语言中的局部变量。
    28 0000006C 4883EC20                         sub rsp, 32
    29                                  
    30 00000070 B80A000000                       mov rax, 10                              ;分配内存
    31 00000075 BAA0000000                       mov rdx, 160                             ;160个字节
    32 0000007A 0F05                             syscall
    33 0000007C 4C896DF8                         mov [rbp-8], r13                         ;RBP-8->总字符串缓冲区的线性地址
    34                                  
    35 00000080 4981C580000000                   add r13, 128
    36 00000087 4C896DF0                         mov [rbp-16], r13                        ;RBP-16->用来保存线程标识的文本
    37                                  
    38 0000008B B808000000                       mov rax, 8                               ;获得当前线程的标识
    39 00000090 0F05                             syscall
    40 00000092 4989C0                           mov r8, rax
    41 00000095 488B5DF0                         mov rbx, [rbp-16]
    42 00000099 E862FFFFFF                       call bin64_to_dec                        ;将线程标识转换为字符串
    43                                  
    44 0000009E B90065CD1D                       mov rcx, 500000000
    45                                    .plus_one:
    46 000000A3 F048FF05(28000000)               lock inc qword [rel share_d]
    47 000000AB E2F6                             loop .plus_one
    48                                  
    49 000000AD 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
    50                                  
    51 000000B4 488B7DF8                         mov rdi, [rbp-8]                         ;总字符串缓冲区的线性地址
    52 000000B8 C60700                           mov byte [rdi], 0
    53                                  
    54 000000BB 498DB424[00000000]               lea rsi, [r12 + tid_prex]
    55 000000C3 E880FFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    56                                  
    57 000000C8 488B75F0                         mov rsi, [rbp-16]
    58 000000CC E877FFFFFF                       call string_concatenates
    59                                  
    60 000000D1 498DB424[08000000]               lea rsi, [r12 + thrd_msg]
    61 000000D9 E86AFFFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
    62                                  
    63 000000DE B800000000                       mov rax, 0                               ;确定当前线程可以使用的显示行
    64 000000E3 0F05                             syscall                                  ;可用显示行，DH=行号
    65                                  
    66 000000E5 B200                             mov dl, 0
    67 000000E7 41B10F                           mov r9b, 0x0f
    68                                  
    69 000000EA B802000000                       mov rax, 2                               ;在指定坐标显示字符串
    70 000000EF 4889FB                           mov rbx, rdi
    71 000000F2 0F05                             syscall
    72                                  
    73 000000F4 4889EC                           mov rsp, rbp                             ;栈平衡到返回位置
    74 000000F7 C3                               ret
    75                                  
    76                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    77                                  thread_procedure2:
    78 000000F8 4889E5                           mov rbp, rsp                             ;RBP访问栈中数据，高级语言中的局部变量。
    79 000000FB 4883EC20                         sub rsp, 32
    80                                  
    81 000000FF B80A000000                       mov rax, 10                              ;分配内存
    82 00000104 BAA0000000                       mov rdx, 160                             ;160个字节
    83 00000109 0F05                             syscall
    84 0000010B 4C896DF8                         mov [rbp-8], r13                         ;RBP-8->总字符串缓冲区的线性地址
    85                                  
    86 0000010F 4981C580000000                   add r13, 128
    87 00000116 4C896DF0                         mov [rbp-16], r13                        ;RBP-16->用来保存线程标识的文本
    88                                  
    89 0000011A B808000000                       mov rax, 8                               ;获得当前线程的标识
    90 0000011F 0F05                             syscall
    91 00000121 4989C0                           mov r8, rax
    92 00000124 488B5DF0                         mov rbx, [rbp-16]
    93 00000128 E8D3FEFFFF                       call bin64_to_dec                        ;将线程标识转换为字符串
    94                                  
    95 0000012D B90065CD1D                       mov rcx, 500000000
    96                                    .minus_one:
    97 00000132 F048FF0D(28000000)               lock dec qword [rel share_d]
    98 0000013A E2F6                             loop .minus_one
    99                                  
   100 0000013C 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
   101                                  
   102 00000143 488B7DF8                         mov rdi, [rbp-8]                         ;总字符串缓冲区的线性地址
   103 00000147 C60700                           mov byte [rdi], 0
   104                                  
   105 0000014A 498DB424[00000000]               lea rsi, [r12 + tid_prex]
   106 00000152 E8F1FEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   107                                  
   108 00000157 488B75F0                         mov rsi, [rbp-16]
   109 0000015B E8E8FEFFFF                       call string_concatenates
   110                                  
   111 00000160 498DB424[08000000]               lea rsi, [r12 + thrd_msg]
   112 00000168 E8DBFEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   113                                  
   114 0000016D B800000000                       mov rax, 0                               ;确定当前线程可以使用的显示行
   115 00000172 0F05                             syscall                                  ;可用显示行，DH=行号
   116                                  
   117 00000174 B200                             mov dl, 0
   118 00000176 41B10F                           mov r9b, 0x0f
   119                                  
   120 00000179 B802000000                       mov rax, 2                               ;在指定坐标显示字符串
   121 0000017E 4889FB                           mov rbx, rdi
   122 00000181 0F05                             syscall
   123                                  
   124 00000183 4889EC                           mov rsp, rbp                             ;栈平衡到返回位置
   125 00000186 C3                               ret
   126                                  
   127                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   128                                  main:
   129 00000187 488B3D(10000000)                 mov rdi, [rel linear]                    ;当前程序加载的起始线性地址
   130                                  
   131 0000018E B807000000                       mov rax, 7                               ;创建线程
   132                                  
   133 00000193 488DB7[69000000]                 lea rsi, [rdi + thread_procedure1]       ;线程例程的线性地址
   134 0000019A 0F05                             syscall                                  ;创建第一个线程
   135 0000019C 48891579000000                   mov [rel .thrd_1], rdx                   ;保存线程1的标识
   136                                  
   137 000001A3 488DB7[F8000000]                 lea rsi, [rdi + thread_procedure2]       ;线程例程的线性地址
   138 000001AA 0F05                             syscall                                  ;创建第二个线程
   139 000001AC 48891571000000                   mov [rel .thrd_2], rdx                   ;保存线程2的标识
   140                                  
   141 000001B3 B80B000000                       mov rax, 11
   142 000001B8 488B155D000000                   mov rdx, [rel .thrd_1]
   143 000001BF 0F05                             syscall                                  ;等待线程1结束
   144                                  
   145 000001C1 488B155C000000                   mov rdx, [rel .thrd_2]
   146 000001C8 0F05                             syscall                                  ;等待线程2结束
   147                                  
   148 000001CA 4C8B25(10000000)                 mov r12, [rel linear]                    ;当前程序加载的起始线性地址
   149                                  
   150 000001D1 498DBC24[7C020000]               lea rdi, [r12 + .main_buf]               ;总字符串缓冲区的线性地址
   151 000001D9 C60700                           mov byte [rdi], 0
   152                                  
   153 000001DC 498DB424[2C020000]               lea rsi, [r12 + .main_msg]
   154 000001E4 E85FFEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   155                                  
   156 000001E9 4C8B05(28000000)                 mov r8, [rel share_d]
   157 000001F0 498D9C24[5C020000]               lea rbx, [r12 + .main_dat]
   158 000001F8 E803FEFFFF                       call bin64_to_dec                        ;将共享变量的值转换为字符串
   159                                  
   160 000001FD 4889DE                           mov rsi, rbx
   161 00000200 E843FEFFFF                       call string_concatenates                 ;字符串连接，和strcat相同
   162                                  
   163 00000205 B800000000                       mov rax, 0                               ;确定当前线程可以使用的显示行
   164 0000020A 0F05                             syscall                                  ;可用显示行，DH=行号
   165                                  
   166 0000020C B200                             mov dl, 0                                ;列坐标
   167 0000020E 41B10F                           mov r9b, 0x0f                            ;文本颜色
   168                                  
   169 00000211 B802000000                       mov rax, 2                               ;在指定坐标显示字符串
   170 00000216 4889FB                           mov rbx, rdi
   171 00000219 0F05                             syscall
   172                                  
   173 0000021B C3                               ret
   174                                  
   175 0000021C 0000000000000000          .thrd_1       dq 0                              ;线程1的标识
   176 00000224 0000000000000000          .thrd_2       dq 0                              ;线程2的标识
   177                                  
   178 0000022C 54686520726573756C-       .main_msg db "The result after calculation by two threads is:", 0
   178 00000235 742061667465722063-
   178 0000023E 616C63756C6174696F-
   178 00000247 6E2062792074776F20-
   178 00000250 746872656164732069-
   178 00000259 733A00             
   179 0000025C 00<rep 20h>               .main_dat times 32 db 0
   180 0000027C 00<rep 80h>               .main_buf times 128 db 0
   181                                  
   182                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   183                                  start:   ;程序的入口点
   184                                  
   185                                           ;这里放置初始化代码，比如初始化全局数据（变量）
   186                                  
   187 000002FC E886FEFFFF                       call main
   188                                  
   189                                           ;这里放置清理代码
   190                                  
   191 00000301 B805000000                       mov rax, 5                               ;终止任务
   192 00000306 0F05                             syscall
   193                                  
   194                                  ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   195                                  app_end:
